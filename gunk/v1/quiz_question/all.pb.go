// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: quiz/gunk/v1/quiz_question/all.proto

package qzquestionpb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuizQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	QuizID     int32 `protobuf:"varint,2,opt,name=QuizID,proto3" json:"QuizID,omitempty"`
	QuestionID int32 `protobuf:"varint,3,opt,name=QuestionID,proto3" json:"QuestionID,omitempty"`
}

func (x *QuizQuestion) Reset() {
	*x = QuizQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizQuestion) ProtoMessage() {}

func (x *QuizQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizQuestion.ProtoReflect.Descriptor instead.
func (*QuizQuestion) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{0}
}

func (x *QuizQuestion) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *QuizQuestion) GetQuizID() int32 {
	if x != nil {
		return x.QuizID
	}
	return 0
}

func (x *QuizQuestion) GetQuestionID() int32 {
	if x != nil {
		return x.QuestionID
	}
	return 0
}

type ListQzQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	CategoryName string `protobuf:"bytes,3,opt,name=CategoryName,proto3" json:"CategoryName,omitempty"`
	QuizTitle    string `protobuf:"bytes,4,opt,name=QuizTitle,proto3" json:"QuizTitle,omitempty"`
	QuizTime     int32  `protobuf:"varint,5,opt,name=QuizTime,proto3" json:"QuizTime,omitempty"`
	SortBy       int32  `protobuf:"varint,6,opt,name=SortBy,proto3" json:"SortBy,omitempty"`
}

func (x *ListQzQuestion) Reset() {
	*x = ListQzQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQzQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQzQuestion) ProtoMessage() {}

func (x *ListQzQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQzQuestion.ProtoReflect.Descriptor instead.
func (*ListQzQuestion) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{1}
}

func (x *ListQzQuestion) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ListQzQuestion) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListQzQuestion) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ListQzQuestion) GetQuizTitle() string {
	if x != nil {
		return x.QuizTitle
	}
	return ""
}

func (x *ListQzQuestion) GetQuizTime() int32 {
	if x != nil {
		return x.QuizTime
	}
	return 0
}

func (x *ListQzQuestion) GetSortBy() int32 {
	if x != nil {
		return x.SortBy
	}
	return 0
}

type QuizQuestionFilterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalQuizQuestion []*ListQzQuestion `protobuf:"bytes,1,rep,name=TotalQuizQuestion,proto3" json:"TotalQuizQuestion,omitempty"`
	SearchTerm        string            `protobuf:"bytes,2,opt,name=SearchTerm,proto3" json:"SearchTerm,omitempty"`
	SortBy            int32             `protobuf:"varint,3,opt,name=SortBy,proto3" json:"SortBy,omitempty"`
}

func (x *QuizQuestionFilterList) Reset() {
	*x = QuizQuestionFilterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizQuestionFilterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizQuestionFilterList) ProtoMessage() {}

func (x *QuizQuestionFilterList) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizQuestionFilterList.ProtoReflect.Descriptor instead.
func (*QuizQuestionFilterList) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{2}
}

func (x *QuizQuestionFilterList) GetTotalQuizQuestion() []*ListQzQuestion {
	if x != nil {
		return x.TotalQuizQuestion
	}
	return nil
}

func (x *QuizQuestionFilterList) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

func (x *QuizQuestionFilterList) GetSortBy() int32 {
	if x != nil {
		return x.SortBy
	}
	return 0
}

type ListQuizQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchTerm string `protobuf:"bytes,1,opt,name=SearchTerm,proto3" json:"SearchTerm,omitempty"`
	SortBy     int32  `protobuf:"varint,2,opt,name=SortBy,proto3" json:"SortBy,omitempty"`
}

func (x *ListQuizQuestionRequest) Reset() {
	*x = ListQuizQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuizQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuizQuestionRequest) ProtoMessage() {}

func (x *ListQuizQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuizQuestionRequest.ProtoReflect.Descriptor instead.
func (*ListQuizQuestionRequest) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{3}
}

func (x *ListQuizQuestionRequest) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

func (x *ListQuizQuestionRequest) GetSortBy() int32 {
	if x != nil {
		return x.SortBy
	}
	return 0
}

type ListQuizQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizQuestionFilterList *QuizQuestionFilterList `protobuf:"bytes,1,opt,name=QuizQuestionFilterList,proto3" json:"QuizQuestionFilterList,omitempty"`
}

func (x *ListQuizQuestionResponse) Reset() {
	*x = ListQuizQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuizQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuizQuestionResponse) ProtoMessage() {}

func (x *ListQuizQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuizQuestionResponse.ProtoReflect.Descriptor instead.
func (*ListQuizQuestionResponse) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{4}
}

func (x *ListQuizQuestionResponse) GetQuizQuestionFilterList() *QuizQuestionFilterList {
	if x != nil {
		return x.QuizQuestionFilterList
	}
	return nil
}

type CreateQuizQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	QuizID     int32 `protobuf:"varint,2,opt,name=QuizID,proto3" json:"QuizID,omitempty"`
	QuestionID int32 `protobuf:"varint,3,opt,name=QuestionID,proto3" json:"QuestionID,omitempty"`
}

func (x *CreateQuizQuestionRequest) Reset() {
	*x = CreateQuizQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuizQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizQuestionRequest) ProtoMessage() {}

func (x *CreateQuizQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizQuestionRequest.ProtoReflect.Descriptor instead.
func (*CreateQuizQuestionRequest) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{5}
}

func (x *CreateQuizQuestionRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CreateQuizQuestionRequest) GetQuizID() int32 {
	if x != nil {
		return x.QuizID
	}
	return 0
}

func (x *CreateQuizQuestionRequest) GetQuestionID() int32 {
	if x != nil {
		return x.QuestionID
	}
	return 0
}

type CreateQuizQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizQuestion *QuizQuestion `protobuf:"bytes,1,opt,name=QuizQuestion,proto3" json:"QuizQuestion,omitempty"`
}

func (x *CreateQuizQuestionResponse) Reset() {
	*x = CreateQuizQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuizQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizQuestionResponse) ProtoMessage() {}

func (x *CreateQuizQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizQuestionResponse.ProtoReflect.Descriptor instead.
func (*CreateQuizQuestionResponse) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{6}
}

func (x *CreateQuizQuestionResponse) GetQuizQuestion() *QuizQuestion {
	if x != nil {
		return x.QuizQuestion
	}
	return nil
}

type EditQuizQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *EditQuizQuestionRequest) Reset() {
	*x = EditQuizQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditQuizQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditQuizQuestionRequest) ProtoMessage() {}

func (x *EditQuizQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditQuizQuestionRequest.ProtoReflect.Descriptor instead.
func (*EditQuizQuestionRequest) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{7}
}

func (x *EditQuizQuestionRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type EditQuizQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizQuestion *QuizQuestion `protobuf:"bytes,1,opt,name=QuizQuestion,proto3" json:"QuizQuestion,omitempty"`
}

func (x *EditQuizQuestionResponse) Reset() {
	*x = EditQuizQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditQuizQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditQuizQuestionResponse) ProtoMessage() {}

func (x *EditQuizQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditQuizQuestionResponse.ProtoReflect.Descriptor instead.
func (*EditQuizQuestionResponse) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{8}
}

func (x *EditQuizQuestionResponse) GetQuizQuestion() *QuizQuestion {
	if x != nil {
		return x.QuizQuestion
	}
	return nil
}

type DeleteQuizQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteQuizQuestionRequest) Reset() {
	*x = DeleteQuizQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuizQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuizQuestionRequest) ProtoMessage() {}

func (x *DeleteQuizQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuizQuestionRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuizQuestionRequest) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteQuizQuestionRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type DeleteQuizQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteQuizQuestionResponse) Reset() {
	*x = DeleteQuizQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuizQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuizQuestionResponse) ProtoMessage() {}

func (x *DeleteQuizQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuizQuestionResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuizQuestionResponse) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{10}
}

type UpdateQuizQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	QuizID     int32 `protobuf:"varint,2,opt,name=QuizID,proto3" json:"QuizID,omitempty"`
	QuestionID int32 `protobuf:"varint,3,opt,name=QuestionID,proto3" json:"QuestionID,omitempty"`
}

func (x *UpdateQuizQuestionRequest) Reset() {
	*x = UpdateQuizQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuizQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuizQuestionRequest) ProtoMessage() {}

func (x *UpdateQuizQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuizQuestionRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuizQuestionRequest) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateQuizQuestionRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateQuizQuestionRequest) GetQuizID() int32 {
	if x != nil {
		return x.QuizID
	}
	return 0
}

func (x *UpdateQuizQuestionRequest) GetQuestionID() int32 {
	if x != nil {
		return x.QuestionID
	}
	return 0
}

type UpdateQuizQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateQuizQuestionResponse) Reset() {
	*x = UpdateQuizQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuizQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuizQuestionResponse) ProtoMessage() {}

func (x *UpdateQuizQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuizQuestionResponse.ProtoReflect.Descriptor instead.
func (*UpdateQuizQuestionResponse) Descriptor() ([]byte, []int) {
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP(), []int{12}
}

var File_quiz_gunk_v1_quiz_question_all_proto protoreflect.FileDescriptor

var file_quiz_gunk_v1_quiz_question_all_proto_rawDesc = []byte{
	0x0a, 0x24, 0x71, 0x75, 0x69, 0x7a, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x69, 0x7a, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x71, 0x7a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x62, 0x22, 0x6a, 0x0a, 0x0c, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x12, 0x1a, 0x0a, 0x06,
	0x51, 0x75, 0x69, 0x7a, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x12, 0x19, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x12, 0x20, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x12, 0x1d, 0x0a, 0x09, 0x51, 0x75, 0x69, 0x7a,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x51, 0x75, 0x69, 0x7a, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x12, 0x1a, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa1, 0x01, 0x0a, 0x16, 0x51, 0x75,
	0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x69,
	0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x71, 0x7a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x12, 0x1a, 0x0a, 0x06, 0x53, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x5d, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x12, 0x1a, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x74, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x51, 0x75, 0x69, 0x7a,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x71, 0x7a, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x77, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x12, 0x1a, 0x0a, 0x06, 0x51, 0x75, 0x69, 0x7a, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x62, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x51, 0x75, 0x69,
	0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x71, 0x7a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x39, 0x0a, 0x17, 0x45, 0x64, 0x69, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x60, 0x0a, 0x18, 0x45, 0x64,
	0x69, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71,
	0x7a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x69, 0x7a,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x3b, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x24, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x77, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x12, 0x1a, 0x0a, 0x06, 0x51, 0x75, 0x69, 0x7a, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x24, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x32, 0xd7,
	0x04, 0x0a, 0x13, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x71,
	0x7a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x71, 0x7a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x06, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x28, 0x00, 0x30, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x45,
	0x64, 0x69, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x2e, 0x71, 0x7a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x71, 0x7a, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x28, 0x00, 0x30, 0x00, 0x12, 0x73, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x2e, 0x71, 0x7a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x71, 0x7a, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51,
	0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x06, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x28, 0x00, 0x30, 0x00, 0x12,
	0x6d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x71, 0x7a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x71, 0x7a, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x06, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x28, 0x00, 0x30, 0x00, 0x12, 0x73,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x71, 0x7a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x71, 0x7a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x42, 0x48, 0x01, 0x50, 0x00, 0x5a, 0x27,
	0x71, 0x75, 0x69, 0x7a, 0x2f, 0x67, 0x75, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x69,
	0x7a, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x71, 0x7a, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00,
	0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_quiz_gunk_v1_quiz_question_all_proto_rawDescOnce sync.Once
	file_quiz_gunk_v1_quiz_question_all_proto_rawDescData = file_quiz_gunk_v1_quiz_question_all_proto_rawDesc
)

func file_quiz_gunk_v1_quiz_question_all_proto_rawDescGZIP() []byte {
	file_quiz_gunk_v1_quiz_question_all_proto_rawDescOnce.Do(func() {
		file_quiz_gunk_v1_quiz_question_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_quiz_gunk_v1_quiz_question_all_proto_rawDescData)
	})
	return file_quiz_gunk_v1_quiz_question_all_proto_rawDescData
}

var (
	file_quiz_gunk_v1_quiz_question_all_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
	file_quiz_gunk_v1_quiz_question_all_proto_goTypes  = []interface{}{
		(*QuizQuestion)(nil),               // 0: qzquestionpb.QuizQuestion
		(*ListQzQuestion)(nil),             // 1: qzquestionpb.ListQzQuestion
		(*QuizQuestionFilterList)(nil),     // 2: qzquestionpb.QuizQuestionFilterList
		(*ListQuizQuestionRequest)(nil),    // 3: qzquestionpb.ListQuizQuestionRequest
		(*ListQuizQuestionResponse)(nil),   // 4: qzquestionpb.ListQuizQuestionResponse
		(*CreateQuizQuestionRequest)(nil),  // 5: qzquestionpb.CreateQuizQuestionRequest
		(*CreateQuizQuestionResponse)(nil), // 6: qzquestionpb.CreateQuizQuestionResponse
		(*EditQuizQuestionRequest)(nil),    // 7: qzquestionpb.EditQuizQuestionRequest
		(*EditQuizQuestionResponse)(nil),   // 8: qzquestionpb.EditQuizQuestionResponse
		(*DeleteQuizQuestionRequest)(nil),  // 9: qzquestionpb.DeleteQuizQuestionRequest
		(*DeleteQuizQuestionResponse)(nil), // 10: qzquestionpb.DeleteQuizQuestionResponse
		(*UpdateQuizQuestionRequest)(nil),  // 11: qzquestionpb.UpdateQuizQuestionRequest
		(*UpdateQuizQuestionResponse)(nil), // 12: qzquestionpb.UpdateQuizQuestionResponse
	}
)

var file_quiz_gunk_v1_quiz_question_all_proto_depIdxs = []int32{
	1,  // 0: qzquestionpb.QuizQuestionFilterList.TotalQuizQuestion:type_name -> qzquestionpb.ListQzQuestion
	2,  // 1: qzquestionpb.ListQuizQuestionResponse.QuizQuestionFilterList:type_name -> qzquestionpb.QuizQuestionFilterList
	0,  // 2: qzquestionpb.CreateQuizQuestionResponse.QuizQuestion:type_name -> qzquestionpb.QuizQuestion
	0,  // 3: qzquestionpb.EditQuizQuestionResponse.QuizQuestion:type_name -> qzquestionpb.QuizQuestion
	5,  // 4: qzquestionpb.QuizQuestionService.CreateQuizQuestion:input_type -> qzquestionpb.CreateQuizQuestionRequest
	7,  // 5: qzquestionpb.QuizQuestionService.EditQuizQuestion:input_type -> qzquestionpb.EditQuizQuestionRequest
	9,  // 6: qzquestionpb.QuizQuestionService.DeleteQuizQuestion:input_type -> qzquestionpb.DeleteQuizQuestionRequest
	3,  // 7: qzquestionpb.QuizQuestionService.ListQuizQuestion:input_type -> qzquestionpb.ListQuizQuestionRequest
	11, // 8: qzquestionpb.QuizQuestionService.UpdateQuizQuestion:input_type -> qzquestionpb.UpdateQuizQuestionRequest
	6,  // 9: qzquestionpb.QuizQuestionService.CreateQuizQuestion:output_type -> qzquestionpb.CreateQuizQuestionResponse
	8,  // 10: qzquestionpb.QuizQuestionService.EditQuizQuestion:output_type -> qzquestionpb.EditQuizQuestionResponse
	10, // 11: qzquestionpb.QuizQuestionService.DeleteQuizQuestion:output_type -> qzquestionpb.DeleteQuizQuestionResponse
	4,  // 12: qzquestionpb.QuizQuestionService.ListQuizQuestion:output_type -> qzquestionpb.ListQuizQuestionResponse
	12, // 13: qzquestionpb.QuizQuestionService.UpdateQuizQuestion:output_type -> qzquestionpb.UpdateQuizQuestionResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_quiz_gunk_v1_quiz_question_all_proto_init() }
func file_quiz_gunk_v1_quiz_question_all_proto_init() {
	if File_quiz_gunk_v1_quiz_question_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQzQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizQuestionFilterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuizQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuizQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuizQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuizQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditQuizQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditQuizQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuizQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuizQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuizQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quiz_gunk_v1_quiz_question_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuizQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quiz_gunk_v1_quiz_question_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quiz_gunk_v1_quiz_question_all_proto_goTypes,
		DependencyIndexes: file_quiz_gunk_v1_quiz_question_all_proto_depIdxs,
		MessageInfos:      file_quiz_gunk_v1_quiz_question_all_proto_msgTypes,
	}.Build()
	File_quiz_gunk_v1_quiz_question_all_proto = out.File
	file_quiz_gunk_v1_quiz_question_all_proto_rawDesc = nil
	file_quiz_gunk_v1_quiz_question_all_proto_goTypes = nil
	file_quiz_gunk_v1_quiz_question_all_proto_depIdxs = nil
}
