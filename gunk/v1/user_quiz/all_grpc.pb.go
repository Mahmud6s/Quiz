// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userquizpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserQuizServiceClient is the client API for UserQuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserQuizServiceClient interface {
	CreateUserQuiz(ctx context.Context, in *CreateUserQuizRequest, opts ...grpc.CallOption) (*CreateUserQuizResponse, error)
	EditUserQuiz(ctx context.Context, in *EditUserQuizRequest, opts ...grpc.CallOption) (*EditUserQuizResponse, error)
	DeleteUserQuiz(ctx context.Context, in *DeleteUserQuizRequest, opts ...grpc.CallOption) (*DeleteUserQuizResponse, error)
	UpdateUserQuiz(ctx context.Context, in *UpdateUserQuizRequest, opts ...grpc.CallOption) (*UpdateUserQuizResponse, error)
	ListUserQuiz(ctx context.Context, in *ListUserQuizRequest, opts ...grpc.CallOption) (*ListUserQuizResponse, error)
}

type userQuizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserQuizServiceClient(cc grpc.ClientConnInterface) UserQuizServiceClient {
	return &userQuizServiceClient{cc}
}

func (c *userQuizServiceClient) CreateUserQuiz(ctx context.Context, in *CreateUserQuizRequest, opts ...grpc.CallOption) (*CreateUserQuizResponse, error) {
	out := new(CreateUserQuizResponse)
	err := c.cc.Invoke(ctx, "/userquizpb.UserQuizService/CreateUserQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQuizServiceClient) EditUserQuiz(ctx context.Context, in *EditUserQuizRequest, opts ...grpc.CallOption) (*EditUserQuizResponse, error) {
	out := new(EditUserQuizResponse)
	err := c.cc.Invoke(ctx, "/userquizpb.UserQuizService/EditUserQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQuizServiceClient) DeleteUserQuiz(ctx context.Context, in *DeleteUserQuizRequest, opts ...grpc.CallOption) (*DeleteUserQuizResponse, error) {
	out := new(DeleteUserQuizResponse)
	err := c.cc.Invoke(ctx, "/userquizpb.UserQuizService/DeleteUserQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQuizServiceClient) UpdateUserQuiz(ctx context.Context, in *UpdateUserQuizRequest, opts ...grpc.CallOption) (*UpdateUserQuizResponse, error) {
	out := new(UpdateUserQuizResponse)
	err := c.cc.Invoke(ctx, "/userquizpb.UserQuizService/UpdateUserQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQuizServiceClient) ListUserQuiz(ctx context.Context, in *ListUserQuizRequest, opts ...grpc.CallOption) (*ListUserQuizResponse, error) {
	out := new(ListUserQuizResponse)
	err := c.cc.Invoke(ctx, "/userquizpb.UserQuizService/ListUserQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserQuizServiceServer is the server API for UserQuizService service.
// All implementations must embed UnimplementedUserQuizServiceServer
// for forward compatibility
type UserQuizServiceServer interface {
	CreateUserQuiz(context.Context, *CreateUserQuizRequest) (*CreateUserQuizResponse, error)
	EditUserQuiz(context.Context, *EditUserQuizRequest) (*EditUserQuizResponse, error)
	DeleteUserQuiz(context.Context, *DeleteUserQuizRequest) (*DeleteUserQuizResponse, error)
	UpdateUserQuiz(context.Context, *UpdateUserQuizRequest) (*UpdateUserQuizResponse, error)
	ListUserQuiz(context.Context, *ListUserQuizRequest) (*ListUserQuizResponse, error)
	mustEmbedUnimplementedUserQuizServiceServer()
}

// UnimplementedUserQuizServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserQuizServiceServer struct {
}

func (UnimplementedUserQuizServiceServer) CreateUserQuiz(context.Context, *CreateUserQuizRequest) (*CreateUserQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserQuiz not implemented")
}
func (UnimplementedUserQuizServiceServer) EditUserQuiz(context.Context, *EditUserQuizRequest) (*EditUserQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserQuiz not implemented")
}
func (UnimplementedUserQuizServiceServer) DeleteUserQuiz(context.Context, *DeleteUserQuizRequest) (*DeleteUserQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserQuiz not implemented")
}
func (UnimplementedUserQuizServiceServer) UpdateUserQuiz(context.Context, *UpdateUserQuizRequest) (*UpdateUserQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserQuiz not implemented")
}
func (UnimplementedUserQuizServiceServer) ListUserQuiz(context.Context, *ListUserQuizRequest) (*ListUserQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserQuiz not implemented")
}
func (UnimplementedUserQuizServiceServer) mustEmbedUnimplementedUserQuizServiceServer() {}

// UnsafeUserQuizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserQuizServiceServer will
// result in compilation errors.
type UnsafeUserQuizServiceServer interface {
	mustEmbedUnimplementedUserQuizServiceServer()
}

func RegisterUserQuizServiceServer(s grpc.ServiceRegistrar, srv UserQuizServiceServer) {
	s.RegisterService(&UserQuizService_ServiceDesc, srv)
}

func _UserQuizService_CreateUserQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuizServiceServer).CreateUserQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userquizpb.UserQuizService/CreateUserQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuizServiceServer).CreateUserQuiz(ctx, req.(*CreateUserQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQuizService_EditUserQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuizServiceServer).EditUserQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userquizpb.UserQuizService/EditUserQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuizServiceServer).EditUserQuiz(ctx, req.(*EditUserQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQuizService_DeleteUserQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuizServiceServer).DeleteUserQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userquizpb.UserQuizService/DeleteUserQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuizServiceServer).DeleteUserQuiz(ctx, req.(*DeleteUserQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQuizService_UpdateUserQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuizServiceServer).UpdateUserQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userquizpb.UserQuizService/UpdateUserQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuizServiceServer).UpdateUserQuiz(ctx, req.(*UpdateUserQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQuizService_ListUserQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuizServiceServer).ListUserQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userquizpb.UserQuizService/ListUserQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuizServiceServer).ListUserQuiz(ctx, req.(*ListUserQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserQuizService_ServiceDesc is the grpc.ServiceDesc for UserQuizService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserQuizService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userquizpb.UserQuizService",
	HandlerType: (*UserQuizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserQuiz",
			Handler:    _UserQuizService_CreateUserQuiz_Handler,
		},
		{
			MethodName: "EditUserQuiz",
			Handler:    _UserQuizService_EditUserQuiz_Handler,
		},
		{
			MethodName: "DeleteUserQuiz",
			Handler:    _UserQuizService_DeleteUserQuiz_Handler,
		},
		{
			MethodName: "UpdateUserQuiz",
			Handler:    _UserQuizService_UpdateUserQuiz_Handler,
		},
		{
			MethodName: "ListUserQuiz",
			Handler:    _UserQuizService_ListUserQuiz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz/gunk/v1/user_quiz/all.proto",
}
