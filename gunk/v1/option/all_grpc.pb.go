// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package optionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OptionServiceClient is the client API for OptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OptionServiceClient interface {
	CreateOption(ctx context.Context, in *CreateOptionRequest, opts ...grpc.CallOption) (*CreateOptionResponse, error)
	DeleteOption(ctx context.Context, in *DeleteOptionRequest, opts ...grpc.CallOption) (*DeleteOptionResponse, error)
	ListOption(ctx context.Context, in *ListOptionRequest, opts ...grpc.CallOption) (*ListOptionResponse, error)
	EditOption(ctx context.Context, in *EditOptionRequest, opts ...grpc.CallOption) (*EditOptionResponse, error)
	UpdateOption(ctx context.Context, in *UpdateOptionRequest, opts ...grpc.CallOption) (*UpdateOptionResponse, error)
}

type optionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOptionServiceClient(cc grpc.ClientConnInterface) OptionServiceClient {
	return &optionServiceClient{cc}
}

func (c *optionServiceClient) CreateOption(ctx context.Context, in *CreateOptionRequest, opts ...grpc.CallOption) (*CreateOptionResponse, error) {
	out := new(CreateOptionResponse)
	err := c.cc.Invoke(ctx, "/optionpb.OptionService/CreateOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionServiceClient) DeleteOption(ctx context.Context, in *DeleteOptionRequest, opts ...grpc.CallOption) (*DeleteOptionResponse, error) {
	out := new(DeleteOptionResponse)
	err := c.cc.Invoke(ctx, "/optionpb.OptionService/DeleteOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionServiceClient) ListOption(ctx context.Context, in *ListOptionRequest, opts ...grpc.CallOption) (*ListOptionResponse, error) {
	out := new(ListOptionResponse)
	err := c.cc.Invoke(ctx, "/optionpb.OptionService/ListOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionServiceClient) EditOption(ctx context.Context, in *EditOptionRequest, opts ...grpc.CallOption) (*EditOptionResponse, error) {
	out := new(EditOptionResponse)
	err := c.cc.Invoke(ctx, "/optionpb.OptionService/EditOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionServiceClient) UpdateOption(ctx context.Context, in *UpdateOptionRequest, opts ...grpc.CallOption) (*UpdateOptionResponse, error) {
	out := new(UpdateOptionResponse)
	err := c.cc.Invoke(ctx, "/optionpb.OptionService/UpdateOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OptionServiceServer is the server API for OptionService service.
// All implementations must embed UnimplementedOptionServiceServer
// for forward compatibility
type OptionServiceServer interface {
	CreateOption(context.Context, *CreateOptionRequest) (*CreateOptionResponse, error)
	DeleteOption(context.Context, *DeleteOptionRequest) (*DeleteOptionResponse, error)
	ListOption(context.Context, *ListOptionRequest) (*ListOptionResponse, error)
	EditOption(context.Context, *EditOptionRequest) (*EditOptionResponse, error)
	UpdateOption(context.Context, *UpdateOptionRequest) (*UpdateOptionResponse, error)
	mustEmbedUnimplementedOptionServiceServer()
}

// UnimplementedOptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOptionServiceServer struct {
}

func (UnimplementedOptionServiceServer) CreateOption(context.Context, *CreateOptionRequest) (*CreateOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOption not implemented")
}
func (UnimplementedOptionServiceServer) DeleteOption(context.Context, *DeleteOptionRequest) (*DeleteOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOption not implemented")
}
func (UnimplementedOptionServiceServer) ListOption(context.Context, *ListOptionRequest) (*ListOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOption not implemented")
}
func (UnimplementedOptionServiceServer) EditOption(context.Context, *EditOptionRequest) (*EditOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditOption not implemented")
}
func (UnimplementedOptionServiceServer) UpdateOption(context.Context, *UpdateOptionRequest) (*UpdateOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOption not implemented")
}
func (UnimplementedOptionServiceServer) mustEmbedUnimplementedOptionServiceServer() {}

// UnsafeOptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OptionServiceServer will
// result in compilation errors.
type UnsafeOptionServiceServer interface {
	mustEmbedUnimplementedOptionServiceServer()
}

func RegisterOptionServiceServer(s grpc.ServiceRegistrar, srv OptionServiceServer) {
	s.RegisterService(&OptionService_ServiceDesc, srv)
}

func _OptionService_CreateOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionServiceServer).CreateOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optionpb.OptionService/CreateOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionServiceServer).CreateOption(ctx, req.(*CreateOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionService_DeleteOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionServiceServer).DeleteOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optionpb.OptionService/DeleteOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionServiceServer).DeleteOption(ctx, req.(*DeleteOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionService_ListOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionServiceServer).ListOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optionpb.OptionService/ListOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionServiceServer).ListOption(ctx, req.(*ListOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionService_EditOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionServiceServer).EditOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optionpb.OptionService/EditOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionServiceServer).EditOption(ctx, req.(*EditOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionService_UpdateOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionServiceServer).UpdateOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/optionpb.OptionService/UpdateOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionServiceServer).UpdateOption(ctx, req.(*UpdateOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OptionService_ServiceDesc is the grpc.ServiceDesc for OptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "optionpb.OptionService",
	HandlerType: (*OptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOption",
			Handler:    _OptionService_CreateOption_Handler,
		},
		{
			MethodName: "DeleteOption",
			Handler:    _OptionService_DeleteOption_Handler,
		},
		{
			MethodName: "ListOption",
			Handler:    _OptionService_ListOption_Handler,
		},
		{
			MethodName: "EditOption",
			Handler:    _OptionService_EditOption_Handler,
		},
		{
			MethodName: "UpdateOption",
			Handler:    _OptionService_UpdateOption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz/gunk/v1/option/all.proto",
}
